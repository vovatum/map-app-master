{"version":3,"sources":["state/input-reducer.ts","components/Input.tsx","api/geocoder-api.ts","api/search-org-api.ts","state/geocoder-reducer.ts","components/SearchForm.tsx","components/SchoolsList.tsx","components/MapPage.tsx","App.tsx","state/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initialState","id","name","addLocationName","type","Input","React","memo","props","dispatch","useDispatch","useState","value","setName","error","setError","onKeyPressHandler","event","key","trim","delSpace","setErrorNull","className","placeholder","onKeyPress","onChange","onChangeHandler","currentTarget","onBlur","onClick","instance","axios","create","baseURL","getCoordinate","requestText","a","get","data","response","getSchoolsApi","cityCoordinates","schools","geometry","coordinates","properties","description","CompanyMetaData","address","url","addCityCoordinates","getCityCoordinates","country","city","RegExp","join","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","map","el","features","filter","s","toLowerCase","match","console","log","SearchForm","locations","useSelector","state","inputData","onSearch","redirectFunc","item","to","doRedirectFunc","SchoolsList","cityData","school","MapPage","view","setView","center","zoom","controls","width","height","modules","content","options","float","selectOnClick","coords","setCityCoordinates","iconCaption","balloonContentHeader","balloonContentBody","hintContent","preset","hideIconOnBalloonOpen","App","redirect","setRedirect","path","render","rootReducer","combineReducers","action","JSON","stringify","store","createStore","applyMiddleware","thunk","window","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c08e63e5.chunk.js","sourcesContent":["export type LocationType = {\n    id: string\n    name: string\n}\n\nconst initialState = [\n    {id: 'Country', name: ''},\n    {id: 'City', name: ''},\n]\n\nexport const inputReducer = (state: Array<LocationType> = initialState, action: ActionType) => {\n\n    switch (action.type) {\n        case 'ADD_LOCATION_NAME':\n            return state.map(item => {\n                return item.id === action.id\n                    ? {...item, name: action.name}\n                    : item\n            })\n        default :\n            return state;\n    }\n}\n\ntype ActionType = ReturnType<typeof addLocationName>\n\nexport const addLocationName = (id: string, name: string) => ({\n    type: 'ADD_LOCATION_NAME', id, name\n})\n\n\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addLocationName} from \"../state/input-reducer\";\r\n\r\ntype InputPropsType = {\r\n    id: string\r\n    value: string\r\n    placeholder: string\r\n    onChangeHandler: (id: string, value: string) => void\r\n    onKeyPressHandler: (id: string,key: string) => void\r\n}\r\n\r\nexport const Input = React.memo(function (props: InputPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [name, setName] = useState(props.value)\r\n    let [error, setError] = useState<string | null>(null)\r\n    const valError = () => {\r\n        if (name.trim() !== '') {\r\n            setName('')\r\n            setError(null)\r\n        } else {\r\n            setName('')\r\n            setError('Name is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeHandler(props.id, event.currentTarget.value)\r\n        setName(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (event.key === 'Enter' && error === null) {\r\n                valError()\r\n                props.onKeyPressHandler(props.id, event.key)\r\n\r\n            } else {\r\n                setError(null)\r\n                delSpace()\r\n            }\r\n    }\r\n    const setErrorNull = () => {\r\n        setError(null)\r\n        delSpace()\r\n    }\r\n    const delSpace = () => {\r\n        props.value.trim() === ''\r\n        && dispatch(addLocationName(props.id, ''))\r\n    }\r\n\r\n    return error === null\r\n        ? <input className={'formCity input'}\r\n                 type='text'\r\n                 placeholder={props.placeholder}\r\n                 value={props.value}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onChange={onChangeHandler}\r\n                 onBlur={delSpace}\r\n\r\n        />\r\n        : <input className={'error'}\r\n                 value={error}\r\n                 onClick={setErrorNull}\r\n                 onChange={setErrorNull}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onBlur={setErrorNull}\r\n        />\r\n})","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://geocode-maps.yandex.ru/1.x/',\r\n})\r\nconst apikey = \"cf257613-388c-495a-989f-98c40a840056\"\r\n\r\nexport const getCoordinate = async (requestText: string) => {\r\n    return (await instance.get(`?format=json&geocode=${requestText}&apikey=${apikey}`))\r\n        .data.response\r\n}\r\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://search-maps.yandex.ru/v1/',\n})\nconst apikey = \"2fabdc58-1495-4a84-afef-ac1bc6f1f91c\"\n\nexport const getSchoolsApi = async (requestText: string) => {\n    return (await instance.get(`?text=${requestText} обучение программированию, it школа&results=100&lang=ru_RU&apikey=${apikey}`))\n        .data\n}\n","import {getCoordinate} from \"../api/geocoder-api\";\r\nimport {getSchoolsApi} from \"../api/search-org-api\";\r\nimport React from \"react\";\r\n\r\ntype PropertiesType = {\r\n    name: {} | null | undefined\r\n    description: React.ReactNode\r\n    CompanyMetaData: any;\r\n}\r\ntype GeometryType = {\r\n    coordinates: Array<number>\r\n    type: string\r\n}\r\nexport type SchoolType = {\r\n    geometry: GeometryType\r\n    properties: PropertiesType\r\n    type: string\r\n}\r\ntype InitialStateType = {\r\n    cityCoordinates: Array<number>,\r\n    schools: Array<SchoolType>\r\n}\r\n\r\nconst initialState = {\r\n    cityCoordinates: [53.90, 27.56],\r\n    schools: [{\r\n        geometry: {\r\n            coordinates: [1, 2],\r\n            type: ''\r\n        },\r\n        properties: {\r\n            name: {},\r\n            description: null,\r\n            CompanyMetaData: {\r\n              id: '',\r\n              name: '',\r\n              address: '',\r\n              url: '',\r\n            },\r\n\r\n        },\r\n        type: ''\r\n    }]\r\n}\r\n\r\nexport const geocodeReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n\r\nconsole.log(JSON.stringify(state))\r\n\r\n    switch (action.type) {\r\n        case 'GET_CITY_COORDINATES':\r\n            return {\r\n                ...state,\r\n                cityCoordinates: action.cityCoordinates,\r\n                schools: action.schools\r\n            }\r\n        case 'SET_CITY_COORDINATES':\r\n          return {\r\n            ...state,\r\n            cityCoordinates: action.cityCoordinates,\r\n          }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addCityCoordinates> | ReturnType<typeof setCityCoordinates>\r\n\r\nexport const addCityCoordinates = (cityCoordinates: Array<number>, schools: Array<any>) => ({\r\n    type: 'GET_CITY_COORDINATES',\r\n    cityCoordinates,\r\n    schools\r\n} as const)\r\n\r\nexport const setCityCoordinates = (cityCoordinates: Array<number>) => ({\r\n    type: 'SET_CITY_COORDINATES',\r\n    cityCoordinates,\r\n} as const)\r\n\r\nexport const getCityCoordinates = (country: string, city: string) => async (dispatch: any) => {\r\n    const arr = ['средняя', 'гимназия']\r\n    const value = new RegExp(arr.join('|'), 'i')\r\n    const cityCoordinates = (await getCoordinate(country + ' ' + city))\r\n        .GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ').reverse().map((el: string) => +el)\r\n    const schools = (await getSchoolsApi(country + ' ' + city))\r\n        .features.filter((s: any) => !s.properties.name.toLowerCase().match(value)).map((s: any) => ({\r\n            ...s,\r\n            coordinates: s.geometry.coordinates.reverse()\r\n        }))\r\n  console.log(schools)\r\n    dispatch(addCityCoordinates(cityCoordinates, schools))\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport '../App.css';\r\nimport {Input} from \"./Input\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {addLocationName, LocationType} from \"../state/input-reducer\";\r\nimport {getCityCoordinates} from \"../state/geocoder-reducer\";\r\n\r\ntype FormPropsType = {\r\n    redirectFunc: () => void\r\n    doRedirectFunc: () => void\r\n}\r\n\r\nexport const SearchForm = React.memo(function (props: FormPropsType) {\r\n\r\n    const locations = useSelector<AppRootStateType, Array<LocationType>>(state => state.inputData)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeHandler = (id: string, value: string) => {\r\n        dispatch(addLocationName(id, value))\r\n    }\r\n    const onKeyPressHandler = (id: string, key: string) => onSearch()\r\n    const onSearch = () => {\r\n        const country = locations[0].name.trim()\r\n        const city = locations[1].name.trim()\r\n        country === '' && city === ''//geocode\r\n            ? dispatch(getCityCoordinates('Belarus', 'Minsk'))\r\n            : dispatch(getCityCoordinates(country, city))\r\n        props.redirectFunc()\r\n    }\r\n\r\n    return (\r\n        <form className=\"formWrapper\">\r\n            <div className='formName'>Name</div>\r\n            {locations.map(item => {\r\n                return <div className={'form' + item.id}>\r\n                    <div>{item.id}</div>\r\n                    <Input\r\n                        key={item.id}\r\n                        id={item.id}\r\n                        value={item.name}\r\n                        placeholder={'E' + `nter your ${item.id}`.toLowerCase()}\r\n                        onChangeHandler={onChangeHandler}\r\n                        onKeyPressHandler={onKeyPressHandler}\r\n                    />\r\n                </div>\r\n            })}\r\n            <div>\r\n                <NavLink to='/yandexMap'>\r\n                    <button className='btnFormSearch'\r\n                            onClick={onSearch}\r\n                    >Search\r\n                    </button>\r\n                </NavLink>\r\n                {props.doRedirectFunc()}\r\n            </div>\r\n            <div/>\r\n        </form>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {SchoolType} from \"../state/geocoder-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\ntype PropsType = {\r\n    schools: Array<SchoolType>\r\n}\r\n\r\nfunction SchoolsList(props: PropsType) {\r\n    // console.log(props.schools)\r\n    const schools = useSelector<AppRootStateType, Array<SchoolType>>(state => state.cityData.schools)\r\n\r\n    return (\r\n        <div className=\"listWrapper\">\r\n            <div className=\"schoolItem\">\r\n                {schools.map(school => {\r\n                    return <div>-\r\n                        {school.properties.name},\r\n                        {school.properties.description},\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SchoolsList;","import React, {useState} from 'react';\r\nimport {ListBox, ListBoxItem, Map, Placemark, YMaps} from \"react-yandex-maps\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from '../state/store';\r\nimport '../App.css'\r\nimport SchoolsList from \"./SchoolsList\";\r\nimport {SchoolType, setCityCoordinates} from \"../state/geocoder-reducer\";\r\n\r\nexport const MapPage = React.memo(() => {\r\n\r\n    const cityCoordinates = useSelector<AppRootStateType, Array<number>>(state => state.cityData.cityCoordinates)\r\n    const schools = useSelector<AppRootStateType, Array<SchoolType>>(state => state.cityData.schools)\r\n    const [view, setView] = useState('Map view')\r\n    const modeView = () => view === 'Map view' ? setView('List view') : setView('Map view')\r\n    const dispatch = useDispatch()\r\n\r\n  const cities = [\r\n    {\r\n      data: { content: 'Minsk' },\r\n      options: { selectOnClick: false },\r\n      coords: [53.902284, 27.561831],\r\n    },\r\n    {\r\n      data: { content: 'Kiev' },\r\n      options: { selectOnClick: false },\r\n      coords: [50.450441, 30.523550],\r\n    },\r\n    {\r\n      data: { content: 'Moscow' },\r\n      options: { selectOnClick: false },\r\n      coords: [55.753559, 37.609218],\r\n    },\r\n  ]\r\n\r\n  const onItemClick = (coords: any) => {\r\n    dispatch(setCityCoordinates(coords))\r\n  }\r\n\r\n\r\n  return (\r\n        <div>\r\n            <button onClick={modeView}>Change view</button>\r\n            <YMaps>\r\n                <div className=\"mapWrapper\">\r\n                    {view === 'Map view' ?\r\n                        <Map state={{center: cityCoordinates, zoom: 12, controls: ['zoomControl', 'fullscreenControl']}}\r\n                             width={'100%'} height={'100vh'}\r\n                             modules={['control.ZoomControl', 'control.FullscreenControl', 'geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n                        >\r\n                          <ListBox data={{ content: 'Choose city' }} options={{ float: 'left'}}>\r\n                            {cities.map(city =>\r\n                                <ListBoxItem\r\n                                    data={city.data}\r\n                                    options={city.options}\r\n                                    onClick={() => onItemClick(city.coords)}\r\n                                    key={city.data.content}\r\n                                />\r\n                            )}\r\n                          </ListBox>\r\n\r\n                            {schools.map((school) =>\r\n                                <Placemark geometry={school.geometry.coordinates}\r\n                                           properties={{\r\n                                               iconCaption: school.properties.name,\r\n                                               balloonContentHeader: school.properties.name,\r\n                                               balloonContentBody:   `<address>\r\n                                                                     ${school.properties.CompanyMetaData.address}\r\n                                                                     <br/>\r\n                                                                     ${school.properties.CompanyMetaData.url ? `Подробнее: <a href=\"${school.properties.CompanyMetaData.url}\">${school.properties.CompanyMetaData.url}</a>` : \"\"}\r\n                                                                     </address>`,\r\n                                               hintContent: school.properties.name\r\n\r\n                                           }}\r\n                                           options={{\r\n                                               preset: \"islands#blueLeisureIcon\",\r\n                                               hideIconOnBalloonOpen: false\r\n                                           }}\r\n\r\n                                />)}\r\n                        </Map>\r\n                        : <SchoolsList schools={schools}/>\r\n                    }\r\n                </div>\r\n            </YMaps>\r\n        </div>\r\n    )\r\n})\r\n\r\n// key={school.properties.CompanyMetaData.id}\r\n\r\n\r\n","import React from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport {SearchForm} from \"./components/SearchForm\";\nimport {MapPage} from \"./components/MapPage\";\n\nfunction App() {\n\n    const [redirect, setRedirect] = useState(false)\n\n    function redirectFunc() {\n        setRedirect(true)\n    }\n\n    function doRedirectFunc() {\n        if (redirect) {\n            return <Route path='/yandexMap' render={() => <MapPage/>}/>\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <SearchForm\n                redirectFunc={redirectFunc}\n                doRedirectFunc={doRedirectFunc}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {geocodeReducer} from \"./geocoder-reducer\";\nimport {inputReducer} from \"./input-reducer\";\n\nconst rootReducer = combineReducers({\n    cityData: geocodeReducer,\n    inputData: inputReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\n// @ts-ignore\nwindow.store = store;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}