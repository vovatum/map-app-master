{"version":3,"sources":["state/input-reducer.ts","components/Input.tsx","api/geocoder-api.ts","api/search-org-api.ts","state/geocoder-reducer.ts","components/SearchForm.tsx","components/SchoolList.tsx","components/MapPage.tsx","App.tsx","reportWebVitals.ts","state/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initialState","id","name","addLocationName","type","Input","React","memo","props","dispatch","useDispatch","useState","value","setName","error","setError","onKeyPressHandler","event","key","trim","delSpace","setErrorNull","className","placeholder","onKeyPress","onChange","currentTarget","onBlur","onClick","instance","axios","create","baseURL","getCoordinate","requestText","a","get","data","response","getSchoolsApi","cityCoordinates","schools","geometry","coordinates","properties","addCityCoordinates","getCityCoordinates","country","city","RegExp","join","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","map","el","features","filter","s","toLowerCase","match","SearchForm","location","useSelector","state","inputData","item","to","redirectFunc","doRedirectFunc","SchoolList","MapPage","cityData","view","setView","center","zoom","width","height","modules","school","iconCaption","balloonContentHeader","balloonContentBody","description","hintContent","options","preset","hideIconOnBalloonOpen","App","redirect","setRedirect","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b0fc7469.chunk.js","sourcesContent":["export type LocationType = {\n    id: string\n    name: string\n}\n\nconst initialState = [\n    {id: 'Country', name: ''},\n    {id: 'City', name: ''},\n]\n\nexport const inputReducer = (state: Array<LocationType> = initialState, action: ActionType) => {\n\n    switch (action.type) {\n        case 'ADD_LOCATION_NAME':\n            return state.map(item => {\n                return item.id === action.id\n                    ? {...item, name: action.name}\n                    : item\n            })\n        default :\n            return state;\n    }\n}\n\ntype ActionType = ReturnType<typeof addLocationName>\n\nexport const addLocationName = (id: string, name: string) => ({\n    type: 'ADD_LOCATION_NAME', id, name\n})\n\n\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addLocationName} from \"../state/input-reducer\";\r\n\r\ntype InputPropsType = {\r\n    id: string\r\n    value: string\r\n    placeholder: string\r\n}\r\n\r\nexport const Input = React.memo(function (props: InputPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [name, setName] = useState(props.value)\r\n    let [error, setError] = useState<string | null>(null)\r\n    const valError = () => {\r\n        if (name.trim() !== '') {\r\n            setName('')\r\n            setError(null)\r\n        } else {\r\n            setName('')\r\n            setError('Name is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(addLocationName(props.id, event.currentTarget.value))\r\n        setName(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter' && error === null) {\r\n            valError()\r\n        } else {\r\n            setError(null)\r\n            delSpace()\r\n        }\r\n\r\n    }\r\n    const setErrorNull = () => {\r\n        setError(null)\r\n        delSpace()\r\n    }\r\n    const delSpace = () => {\r\n        props.value.trim() === ''\r\n        && dispatch(addLocationName(props.id, ''))\r\n    }\r\n\r\n    return error === null\r\n        ? <input className={'formCity input'}\r\n                 type='text'\r\n                 placeholder={props.placeholder}\r\n                 value={props.value}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onChange={onChangeHandler}\r\n                 onBlur={delSpace}\r\n\r\n        />\r\n        : <input className={'error'}\r\n                 value={error}\r\n                 onClick={setErrorNull}\r\n                 onChange={setErrorNull}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onBlur={setErrorNull}\r\n        />\r\n})","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://geocode-maps.yandex.ru/1.x/',\n})\nconst apikey = \"cf257613-388c-495a-989f-98c40a840056\"\n\nexport const getCoordinate = async (requestText: string) => {\n    return (await instance.get(`?format=json&geocode=${requestText}&apikey=${apikey}`))\n        .data.response\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://search-maps.yandex.ru/v1/',\n})\nconst apikey = \"2fabdc58-1495-4a84-afef-ac1bc6f1f91c\"\n\nexport const getSchoolsApi = async (requestText: string) => {\n    return (await instance.get(`?text=${requestText} обучение программированию, it школа&results=100&lang=ru_RU&apikey=${apikey}`))\n        .data\n}\n","import {getCoordinate} from \"../api/geocoder-api\";\nimport {getSchoolsApi} from \"../api/search-org-api\";\n\ntype GeometryType = {\n    coordinates: Array<number>\n    type: string\n}\ntype SchoolType = {\n    geometry: GeometryType\n    properties: any\n    type: string\n}\ntype InitialStateType = {\n    cityCoordinates: Array<number>,\n    schools: Array<SchoolType>\n}\n\nconst initialState = {\n    cityCoordinates: [53.90, 27.56],\n    schools: [{\n        geometry: {\n            coordinates: [1, 2],\n            type: ''\n        },\n        properties: {},\n        type: ''\n    }]\n}\n\nexport const geocodeReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n\n    switch (action.type) {\n        case 'GET_CITY_COORDINATES':\n            return {\n                ...state,\n                cityCoordinates: action.cityCoordinates,\n                schools: action.schools\n            }\n        default :\n            return state;\n    }\n}\n\ntype ActionType = ReturnType<typeof addCityCoordinates>\n\nexport const addCityCoordinates = (cityCoordinates: Array<number>, schools: Array<any>) => ({\n    type: 'GET_CITY_COORDINATES',\n    cityCoordinates,\n    schools\n} as const)\n\nexport const getCityCoordinates = (country: string, city: string) => async (dispatch: any) => {\n    const arr = ['средняя', 'гимназия']\n    const value = new RegExp(arr.join('|'), 'i')\n    const cityCoordinates = (await getCoordinate(country + ' ' + city))\n        .GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ').reverse().map((el: string) => +el)\n    const schools = (await getSchoolsApi(country + ' ' + city))\n        .features.filter((s: any) => !s.properties.name.toLowerCase().match(value)).map((s: any) => ({\n        ...s,\n        coordinates: s.geometry.coordinates.reverse()\n    }))\n    dispatch(addCityCoordinates(cityCoordinates, schools))\n}\n\n","import React from 'react';\r\nimport '../App.css';\r\nimport {Input} from \"./Input\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {LocationType} from \"../state/input-reducer\";\r\nimport {getCityCoordinates} from \"../state/geocoder-reducer\";\r\n\r\ntype FormPropsType = {\r\n    redirectFunc: () => void\r\n    doRedirectFunc: () => void\r\n}\r\n\r\nexport const SearchForm = React.memo(function (props: FormPropsType) {\r\n    const location = useSelector<AppRootStateType, Array<LocationType>>(state => state.inputData)\r\n    const dispatch = useDispatch()\r\n    const onSearch = () => {\r\n        const country = location[0].name\r\n        const city = location[1].name\r\n        country === '' && city === ''//geocode\r\n            ? dispatch(getCityCoordinates('Belarus', 'Minsk'))\r\n            : dispatch(getCityCoordinates(country, city))\r\n        props.redirectFunc()\r\n    }\r\n    return (\r\n        <form className=\"formWrapper\">\r\n            <div className='formName'>Name</div>\r\n            {location.map(item => {\r\n                return <div className={'form' + item.id}>\r\n                    <div>{item.id}</div>\r\n                    <Input\r\n                        key={item.id}\r\n                        id={item.id}\r\n                        value={item.name}\r\n                        placeholder={'E' + `nter your ${item.id}`.toLowerCase()}\r\n                    />\r\n                </div>\r\n            })}\r\n            <div>\r\n                <NavLink to='/yandexMap'>\r\n                    <button className='btnFormSearch'\r\n                            onClick={onSearch}\r\n                    >Search\r\n                    </button>\r\n                </NavLink>\r\n                {props.doRedirectFunc()}\r\n            </div>\r\n            <div/>\r\n        </form>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction SchoolList() {\r\n\r\n  return (\r\n    <div className=\"listWrapper\">\r\n      <div className=\"schoolItem\">\r\n        <div>SchoolName</div>\r\n        <div>Rating</div>\r\n        <div>Address</div>\r\n        <div>Work Time</div>\r\n        <div>Telephone</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SchoolList;","import React, {useState} from 'react';\r\nimport {Map, Placemark, YMaps} from \"react-yandex-maps\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from '../state/store';\r\nimport '../App.css'\r\nimport SchoolList from \"./SchoolList\";\r\n\r\ntype PropsType = {}\r\n\r\nexport const MapPage = React.memo((props: PropsType) => {\r\n\r\n    const cityCoordinates = useSelector<AppRootStateType, Array<number>>(state => state.cityData.cityCoordinates)\r\n    const schools = useSelector<AppRootStateType, Array<any>>(state => state.cityData.schools)\r\n    const [view, setView] = useState('Map view')\r\n    const modeView = () => view === 'Map view' ? setView('List view') : setView('Map view')\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={modeView}>{view}</button>\r\n            <YMaps>\r\n                <div className=\"mapWrapper\">\r\n                    {view === 'Map view' ?\r\n                        <Map state={{center: cityCoordinates, zoom: 12}} width={'100%'} height={'100vh'}\r\n                             modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n                        >\r\n\r\n                            {schools.map((school) =>\r\n                                <Placemark geometry={school.geometry.coordinates}\r\n                                           properties={{\r\n                                               iconCaption: school.properties.name,\r\n                                               balloonContentHeader: school.properties.name,\r\n                                               balloonContentBody: school.properties.description,\r\n                                               hintContent: school.properties.name\r\n                                           }}\r\n                                           options={{\r\n                                               preset: \"islands#blueLeisureIcon\",\r\n                                               hideIconOnBalloonOpen: false\r\n                                           }}\r\n\r\n                                />)}\r\n                        </Map>\r\n                        : <SchoolList/>\r\n                    }\r\n                </div>\r\n            </YMaps>\r\n        </div>\r\n    )\r\n})\r\n\r\n// key={school.properties.CompanyMetaData.id}\r\n\r\n\r\n","import React from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport {SearchForm} from \"./components/SearchForm\";\nimport {MapPage} from \"./components/MapPage\";\n\nfunction App() {\n\n    const [redirect, setRedirect] = useState(false)\n\n    function redirectFunc() {\n        setRedirect(true)\n    }\n\n    function doRedirectFunc() {\n        if (redirect) {\n            return <Route path='/yandexMap' render={() => <MapPage/>}/>\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <SearchForm\n                redirectFunc={redirectFunc}\n                doRedirectFunc={doRedirectFunc}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {geocodeReducer} from \"./geocoder-reducer\";\nimport {inputReducer} from \"./input-reducer\";\n\nconst rootReducer = combineReducers({\n    cityData: geocodeReducer,\n    inputData: inputReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\n// @ts-ignore\nwindow.store = store;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}