{"version":3,"sources":["state/input-reducer.ts","components/Input.tsx","api/geocoder-api.ts","api/search-org-api.ts","state/geocoder-reducer.ts","components/SearchForm.tsx","components/MapPage.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["initialState","id","name","addLocationName","type","Input","React","memo","props","dispatch","useDispatch","useState","value","setName","error","setError","onKeyPressHandler","event","key","trim","delSpace","setErrorNull","className","placeholder","onKeyPress","onChange","currentTarget","onBlur","onClick","instance","axios","create","baseURL","getCoordinate","requestText","a","get","data","response","getSchoolsApi","cityCoordinates","schools","geometry","coordinates","properties","addCityCoordinates","getCityCoordinates","country","city","RegExp","join","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","map","el","features","filter","s","toLowerCase","match","SearchForm","location","useSelector","state","inputData","item","to","redirectFunc","doRedirectFunc","MapPage","cityData","center","zoom","width","height","modules","school","iconCaption","balloonContentHeader","balloonContentBody","description","hintContent","options","preset","hideIconOnBalloonOpen","App","redirect","setRedirect","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.51914635.chunk.js","sourcesContent":["export type LocationType = {\n    id: string\n    name: string\n}\n\nconst initialState = [\n    {id: 'Country', name: ''},\n    {id: 'City', name: ''},\n]\n\nexport const inputReducer = (state: Array<LocationType> = initialState, action: ActionType) => {\n\n    switch (action.type) {\n        case 'ADD_LOCATION_NAME':\n            return state.map(item => {\n                return item.id === action.id\n                    ? {...item, name: action.name}\n                    : item\n            })\n        default :\n            return state;\n    }\n}\n\ntype ActionType = ReturnType<typeof addLocationName>\n\nexport const addLocationName = (id: string, name: string) => ({\n    type: 'ADD_LOCATION_NAME', id, name\n})\n\n\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addLocationName} from \"../state/input-reducer\";\r\n\r\ntype InputPropsType = {\r\n    id: string\r\n    value: string\r\n    placeholder: string\r\n}\r\n\r\nexport const Input = React.memo(function (props: InputPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [name, setName] = useState(props.value)\r\n    let [error, setError] = useState<string | null>(null)\r\n    const valError = () => {\r\n        if (name.trim() !== '') {\r\n            setName('')\r\n            setError(null)\r\n        } else {\r\n            setName('')\r\n            setError('Name is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(addLocationName(props.id, event.currentTarget.value))\r\n        setName(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter' && error === null) {\r\n            valError()\r\n        } else {\r\n            setError(null)\r\n            delSpace()\r\n        }\r\n\r\n    }\r\n    const setErrorNull = () => {\r\n        setError(null)\r\n        delSpace()\r\n    }\r\n    const delSpace = () => {\r\n        props.value.trim() === ''\r\n        && dispatch(addLocationName(props.id, ''))\r\n    }\r\n\r\n    return error === null\r\n        ? <input className={'formCity input'}\r\n                 type='text'\r\n                 placeholder={props.placeholder}\r\n                 value={props.value}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onChange={onChangeHandler}\r\n                 onBlur={delSpace}\r\n\r\n        />\r\n        : <input className={'error'}\r\n                 value={error}\r\n                 onClick={setErrorNull}\r\n                 onChange={setErrorNull}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onBlur={setErrorNull}\r\n        />\r\n})","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://geocode-maps.yandex.ru/1.x/',\n})\nconst apikey = \"cf257613-388c-495a-989f-98c40a840056\"\n\nexport const getCoordinate = async (requestText: string) => {\n    return (await instance.get(`?format=json&geocode=${requestText}&apikey=${apikey}`))\n        .data.response\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://search-maps.yandex.ru/v1/',\n})\nconst apikey = \"2fabdc58-1495-4a84-afef-ac1bc6f1f91c\"\n\nexport const getSchoolsApi = async (requestText: string) => {\n    return (await instance.get(`?text=${requestText} обучение программированию, it школа&results=100&lang=ru_RU&apikey=${apikey}`))\n        .data\n}\n","import {getCoordinate} from \"../api/geocoder-api\";\nimport {getSchoolsApi} from \"../api/search-org-api\";\n\ntype GeometryType = {\n    coordinates: Array<number>\n    type: string\n}\ntype SchoolType = {\n    geometry: GeometryType\n    properties: any\n    type: string\n}\ntype InitialStateType = {\n    cityCoordinates: Array<number>,\n    schools: Array<SchoolType>\n}\n\nconst initialState = {\n    cityCoordinates: [53.90, 27.56],\n    schools: [{\n        geometry: {\n            coordinates: [1, 2],\n            type: ''\n        },\n        properties: {},\n        type: ''\n    }]\n}\n\nexport const geocodeReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n\n    switch (action.type) {\n        case 'GET_CITY_COORDINATES':\n            return {\n                ...state,\n                cityCoordinates: action.cityCoordinates,\n                schools: action.schools\n            }\n        default :\n            return state;\n    }\n}\n\ntype ActionType = ReturnType<typeof addCityCoordinates>\n\nexport const addCityCoordinates = (cityCoordinates: Array<number>, schools: Array<any>) => ({\n    type: 'GET_CITY_COORDINATES',\n    cityCoordinates,\n    schools\n} as const)\n\nexport const getCityCoordinates = (country: string, city: string) => async (dispatch: any) => {\n    const arr = ['средняя', 'гимназия']\n    const value = new RegExp(arr.join('|'), 'i')\n    const cityCoordinates = (await getCoordinate(country + ' ' + city))\n        .GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ').reverse().map((el: string) => +el)\n    const schools = (await getSchoolsApi(country + ' ' + city))\n        .features.filter((s: any) => !s.properties.name.toLowerCase().match(value)).map((s: any) => ({\n        ...s,\n        coordinates: s.geometry.coordinates.reverse()\n    }))\n    dispatch(addCityCoordinates(cityCoordinates, schools))\n}\n\n","import React from 'react';\r\nimport '../App.css';\r\nimport {Input} from \"./Input\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {LocationType} from \"../state/input-reducer\";\r\nimport {getCityCoordinates} from \"../state/geocoder-reducer\";\r\n\r\ntype FormPropsType = {\r\n    redirectFunc: () => void\r\n    doRedirectFunc: () => void\r\n}\r\n\r\nexport const SearchForm = React.memo(function (props: FormPropsType) {\r\n    const location = useSelector<AppRootStateType, Array<LocationType>>(state => state.inputData)\r\n    const dispatch = useDispatch()\r\n    const onSearch = () => {\r\n        const country = location[0].name\r\n        const city = location[1].name\r\n        country === '' && city === ''//geocode\r\n            ? dispatch(getCityCoordinates('Belarus', 'Minsk'))\r\n            : dispatch(getCityCoordinates(country, city))\r\n        props.redirectFunc()\r\n    }\r\n    return (\r\n        <form className=\"formWrapper\">\r\n            <div className='formName'>Name</div>\r\n            {location.map(item => {\r\n                return <div className={'form' + item.id}>\r\n                    <div>{item.id}</div>\r\n                    <Input\r\n                        key={item.id}\r\n                        id={item.id}\r\n                        value={item.name}\r\n                        placeholder={'E' + `nter your ${item.id}`.toLowerCase()}\r\n                    />\r\n                </div>\r\n            })}\r\n            <div>\r\n                <NavLink to='/yandexMap'>\r\n                    <button className='btnFormSearch'\r\n                            onClick={onSearch}\r\n                    >Search\r\n                    </button>\r\n                </NavLink>\r\n                {props.doRedirectFunc()}\r\n            </div>\r\n            <div/>\r\n        </form>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {Map, Placemark, YMaps} from \"react-yandex-maps\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from '../state/store';\r\nimport '../App.css'\r\n\r\ntype PropsType = {}\r\n\r\nexport const MapPage = React.memo((props: PropsType) => {\r\n\r\n    const cityCoordinates = useSelector<AppRootStateType, Array<number>>(state => state.cityData.cityCoordinates)\r\n    const schools = useSelector<AppRootStateType, Array<any>>(state => state.cityData.schools)\r\n    return (\r\n        <div>\r\n            <YMaps>\r\n                <div className=\"mapWrapper\">\r\n                    <Map state={{center: cityCoordinates, zoom: 12}} width={'100%'} height={'100vh'}\r\n                         modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n                    >\r\n\r\n                        {schools.map((school) =>\r\n                          <Placemark geometry={school.geometry.coordinates}\r\n                                     properties={{ iconCaption: school.properties.name,\r\n                                                   balloonContentHeader: school.properties.name,\r\n                                                   balloonContentBody: school.properties.description,\r\n                                                   hintContent: school.properties.name\r\n                                                 }}\r\n                                     options={{\r\n                                       preset: \"islands#blueLeisureIcon\",\r\n                                       hideIconOnBalloonOpen: false\r\n                                     }}\r\n\r\n                          />)}\r\n                    </Map>\r\n                </div>\r\n            </YMaps>\r\n        </div>\r\n    )\r\n})\r\n\r\n// key={school.properties.CompanyMetaData.id}\r\n\r\n\r\n","import React from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport {SearchForm} from \"./components/SearchForm\";\nimport {MapPage} from \"./components/MapPage\";\n\nfunction App() {\n\n    const [redirect, setRedirect] = useState(false)\n\n    function redirectFunc() {\n        setRedirect(true)\n    }\n\n    function doRedirectFunc() {\n        if (redirect) {\n            return <Route path='/yandexMap' render={() => <MapPage/>}/>\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <SearchForm\n                redirectFunc={redirectFunc}\n                doRedirectFunc={doRedirectFunc}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {geocodeReducer} from \"./geocoder-reducer\";\nimport {inputReducer} from \"./input-reducer\";\n\nconst rootReducer = combineReducers({\n    cityData: geocodeReducer,\n    inputData: inputReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from './state/store';\nimport { HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}